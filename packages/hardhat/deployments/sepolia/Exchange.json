{
  "address": "0xB845d26b35170E3cd73861aAe53E0c121F4af639",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Exchange__AmountIsLessThanMinimumAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Exchange__AmountShouldBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Exchange__InsufficientReturnReserve",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Exchange__LiquidityShouldBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Exchange__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "SwapTokenToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "input_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "input_reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "output_reserve",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "provideLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapEthToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa178579e233373070b189c381db3d8117fba86cbf36fc443d10c9766fc1e23b8",
  "receipt": {
    "to": null,
    "from": "0x133bC7a7EA1E1A5B03D67c1Fe09039c9520D5104",
    "contractAddress": "0xB845d26b35170E3cd73861aAe53E0c121F4af639",
    "transactionIndex": 61,
    "gasUsed": "608595",
    "logsBloom": "0x
    "blockHash": "0xbaf49a1755093f7cec0c807684589b5cc1ad08d24ca20eb2b18170f73cf5097a",
    "transactionHash": "0xa178579e233373070b189c381db3d8117fba86cbf36fc443d10c9766fc1e23b8",
    "logs": [],
    "blockNumber": 5307170,
    "cumulativeGasUsed": "6121717",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf73182c7BcD31f62F7c9A19A19FA34d3b98E5d6a"
  ],
  "numDeployments": 1,
  "solcInputHash": "6a5a6600cbb0ae67050c48056421f49c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Exchange__AmountIsLessThanMinimumAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Exchange__AmountShouldBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Exchange__InsufficientReturnReserve\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Exchange__LiquidityShouldBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Exchange__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SwapTokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"input_reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"output_reserve\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provideLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEthToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"init(uint256)\":{\"details\":\"This function is a simple initialize function. it helps to add some liquidity to the DEX on creation\"},\"price(uint256,uint256,uint256)\":{\"details\":\"This is the function returns the price it will cost a for a swap.\"},\"provideLiquidity()\":{\"details\":\"This is the function that allows  users add liquidity to the exchange\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Layout of Contract:\\r\\n// version\\r\\n// imports\\r\\n// errors\\r\\n// interfaces, libraries, contracts\\r\\n// Type declarations\\r\\n// State variables\\r\\n// Events\\r\\n// Modifiers\\r\\n// Functions\\r\\n\\r\\n// Layout of Functions:\\r\\n// constructor\\r\\n// receive function (if exists)\\r\\n// fallback function (if exists)\\r\\n// external\\r\\n// public\\r\\n// internal\\r\\n// private\\r\\n// view & pure functions\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Exchange {\\r\\n\\t//////////////////\\r\\n\\t/////ERRORS/////\\r\\n\\terror Exchange__TransferFailed(string message);\\r\\n\\terror Exchange__AmountShouldBeGreaterThanZero();\\r\\n\\terror Exchange__AmountIsLessThanMinimumAmount();\\r\\n\\terror Exchange__InsufficientReturnReserve();\\r\\n\\terror Exchange__LiquidityShouldBeZero(string message);\\r\\n\\r\\n\\taddress private tokenAddress;\\r\\n\\tuint256 public totalLiquidity;\\r\\n\\tmapping(address => uint256) public liquidity;\\r\\n\\r\\n\\tusing Math for uint256;\\r\\n\\r\\n\\tconstructor(address _tokenAddress) {\\r\\n\\t\\ttokenAddress = _tokenAddress;\\r\\n\\t}\\r\\n\\t// getReserve returns the balance of `token` held by `this` contract\\r\\n\\r\\n\\tfunction getTokenReserve() public view returns (uint256) {\\r\\n\\t\\treturn IERC20(tokenAddress).balanceOf(address(this));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getEthBalance() public view returns (uint256) {\\r\\n\\t\\treturn address(this).balance;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev This function is a simple initialize function.\\r\\n\\t * it helps to add some liquidity to the DEX on creation\\r\\n\\t */\\r\\n\\tfunction init(uint256 tokenAmount) external payable returns (uint256) {\\r\\n\\t\\tif (totalLiquidity != 0) {\\r\\n\\t\\t\\trevert Exchange__LiquidityShouldBeZero(\\\"DEX already has liquidity\\\");\\r\\n\\t\\t}\\r\\n\\t\\ttotalLiquidity = address(this).balance;\\r\\n\\t\\tliquidity[msg.sender] = totalLiquidity;\\r\\n\\t\\tif (\\r\\n\\t\\t\\t!(\\r\\n\\t\\t\\t\\tIERC20(tokenAddress).transferFrom(\\r\\n\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t\\ttokenAmount\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t)\\r\\n\\t\\t) {\\r\\n\\t\\t\\trevert Exchange__TransferFailed(\\\"Contract funding failed\\\");\\r\\n\\t\\t}\\r\\n\\t\\treturn totalLiquidity;\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev This is the function returns the price\\r\\n\\t * it will cost a for a swap.\\r\\n\\t */\\r\\n\\tfunction price(\\r\\n\\t\\tuint256 input_amount,\\r\\n\\t\\tuint256 input_reserve,\\r\\n\\t\\tuint256 output_reserve\\r\\n\\t) public pure returns (uint256) {\\r\\n\\t\\t(, uint256 input_amount_with_fee) = Math.tryMul(input_amount, 997);\\r\\n\\t\\t(, uint256 numerator) = Math.tryMul(\\r\\n\\t\\t\\tinput_amount_with_fee,\\r\\n\\t\\t\\toutput_reserve\\r\\n\\t\\t);\\r\\n\\t\\t(, uint256 input_reserve_fee) = Math.tryMul(input_reserve, 1000);\\r\\n\\t\\t(, uint256 denominator) = Math.tryAdd(\\r\\n\\t\\t\\tinput_reserve_fee,\\r\\n\\t\\t\\tinput_amount_with_fee\\r\\n\\t\\t);\\r\\n\\t\\t// input_reserve.mul(1000).add(input_amount_with_fee);\\r\\n\\t\\treturn numerator / denominator;\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapEthToToken() external payable returns (uint256) {\\r\\n\\t\\tuint256 token_reserve = getTokenReserve();\\r\\n\\t\\t(, uint256 input_reserve) = Math.trySub(\\r\\n\\t\\t\\taddress(this).balance,\\r\\n\\t\\t\\tmsg.value\\r\\n\\t\\t);\\r\\n\\t\\tuint256 tokens_bought = price(msg.value, input_reserve, token_reserve);\\r\\n\\t\\tif (!(IERC20(tokenAddress).transfer(msg.sender, tokens_bought))) {\\r\\n\\t\\t\\trevert Exchange__TransferFailed(\\\"Transfer failed\\\");\\r\\n\\t\\t}\\r\\n\\t\\treturn tokens_bought;\\r\\n\\t}\\r\\n\\r\\n\\tfunction SwapTokenToEth(uint256 tokens) external returns (uint256) {\\r\\n\\t\\tuint256 token_reserve = getTokenReserve();\\r\\n\\t\\tuint256 eth_bought = price(\\r\\n\\t\\t\\ttokens,\\r\\n\\t\\t\\ttoken_reserve,\\r\\n\\t\\t\\taddress(this).balance\\r\\n\\t\\t);\\r\\n\\t\\tpayable(msg.sender).transfer(eth_bought);\\r\\n\\t\\tif (\\r\\n\\t\\t\\t!(\\r\\n\\t\\t\\t\\tIERC20(tokenAddress).transferFrom(\\r\\n\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t\\ttokens\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t)\\r\\n\\t\\t) {\\r\\n\\t\\t\\trevert Exchange__TransferFailed(\\\"Transfer failed\\\");\\r\\n\\t\\t}\\r\\n\\t\\treturn eth_bought;\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev This is the function that allows\\r\\n\\t *  users add liquidity to the exchange\\r\\n\\t */\\r\\n\\tfunction provideLiquidity() external payable returns (uint256) {\\r\\n\\t\\t(, uint256 eth_reserve) = Math.trySub(address(this).balance, msg.value);\\r\\n\\t\\tuint256 token_reserve = getTokenReserve();\\r\\n\\t\\t(, uint256 numerator) = Math.tryMul(msg.value, token_reserve);\\r\\n\\t\\t(, uint256 denominator) = Math.tryAdd(eth_reserve, 1);\\r\\n\\t\\tuint256 token_amount = (numerator / denominator);\\r\\n\\t\\tuint256 liquidity_minted = (msg.value * totalLiquidity) / eth_reserve;\\r\\n\\t\\t(, liquidity[msg.sender]) = Math.tryAdd(\\r\\n\\t\\t\\tliquidity[msg.sender],\\r\\n\\t\\t\\tliquidity_minted\\r\\n\\t\\t);\\r\\n\\t\\t(, totalLiquidity) = Math.tryAdd(totalLiquidity, liquidity_minted);\\r\\n\\t\\tif (\\r\\n\\t\\t\\t!(\\r\\n\\t\\t\\t\\tIERC20(tokenAddress).transferFrom(\\r\\n\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t\\ttoken_amount\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t)\\r\\n\\t\\t) {\\r\\n\\t\\t\\trevert Exchange__TransferFailed(\\\"Transfer failed\\\");\\r\\n\\t\\t}\\r\\n\\t\\treturn liquidity_minted;\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw(uint256 amount) external returns (uint256, uint256) {\\r\\n\\t\\tuint256 token_reserve = getTokenReserve();\\r\\n\\t\\t(, uint256 eth_amt_numerator) = Math.tryMul(amount, getEthBalance());\\r\\n\\t\\t(, uint256 token_amt_numerator) = Math.tryMul(amount, token_reserve);\\r\\n\\t\\tuint256 eth_amount = eth_amt_numerator / totalLiquidity;\\r\\n\\r\\n\\t\\tuint256 token_amount = token_amt_numerator / totalLiquidity;\\r\\n\\t\\t(, liquidity[msg.sender]) = Math.trySub(\\r\\n\\t\\t\\tliquidity[msg.sender],\\r\\n\\t\\t\\teth_amount\\r\\n\\t\\t);\\r\\n\\t\\t(, totalLiquidity) = Math.trySub(totalLiquidity, eth_amount);\\r\\n\\t\\tpayable(msg.sender).transfer(eth_amount);\\r\\n\\t\\tif ((!IERC20(tokenAddress).transfer(msg.sender, token_amount))) {\\r\\n\\t\\t\\trevert Exchange__TransferFailed(\\\"Transfer failed\\\");\\r\\n\\t\\t}\\r\\n\\t\\treturn (eth_amount, token_amount);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x298a5091a89dde3de221dd1628abe5a5ed8b33c07e6ca89a99ea474781f5e4d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a30380380610a3083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61099d806100936000396000f3fe6080604052600436106100915760003560e01c806375c9f3ac1161005957806375c9f3ac1461012f578063b7b0422d14610137578063b8c876b11461014a578063eee1de2314610177578063f1d9f88b1461019757600080fd5b806315770f92146100965780632071a9f4146100bf5780632e1a7d4d146100df57806360c97b221461011457806370ed0ada1461011c575b600080fd5b3480156100a257600080fd5b506100ac60015481565b6040519081526020015b60405180910390f35b3480156100cb57600080fd5b506100ac6100da366004610832565b6101ac565b3480156100eb57600080fd5b506100ff6100fa36600461085e565b610204565b604080519283526020830191909152016100b6565b6100ac610368565b34801561012857600080fd5b50476100ac565b6100ac6104ae565b6100ac61014536600461085e565b610572565b34801561015657600080fd5b506100ac610165366004610877565b60026020526000908152604090205481565b34801561018357600080fd5b506100ac61019236600461085e565b6106b0565b3480156101a357600080fd5b506100ac610738565b6000806101bb856103e56107aa565b91505060006101ca82856107aa565b91505060006101db866103e86107aa565b91505060006101ea82856107f5565b91506101f8905081846108b6565b98975050505050505050565b6000806000610211610738565b9050600061021f85476107aa565b915050600061022e86846107aa565b91505060006001548361024191906108b6565b905060006001548361025391906108b6565b336000908152600260205260409020549091506102709083610810565b336000908152600260205260409020555060015461028e9083610810565b60015550604051339083156108fc029084906000818181858888f193505050501580156102bf573d6000803e3d6000fd5b5060005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033591906108d8565b61035b57604051632e49196f60e01b8152600401610352906108fa565b60405180910390fd5b9097909650945050505050565b6000806103754734610810565b9150506000610382610738565b9050600061039034836107aa565b91505060006103a08460016107f5565b9150600090506103b082846108b6565b9050600085600154346103c39190610923565b6103cd91906108b6565b336000908152600260205260409020549091506103ea90826107f5565b336000908152600260205260409020555060015461040890826107f5565b600155506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610463573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048791906108d8565b6104a457604051632e49196f60e01b8152600401610352906108fa565b9695505050505050565b6000806104b9610738565b905060006104c74734610810565b91505060006104d73483856101ac565b60005460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044015b6020604051808303816000875af115801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906108d8565b61056b57604051632e49196f60e01b8152600401610352906108fa565b9392505050565b60006001546000146105c7576040516305047fa760e41b815260206004820152601960248201527f44455820616c726561647920686173206c6971756964697479000000000000006044820152606401610352565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906108d8565b6106a857604051632e49196f60e01b815260206004820152601760248201527f436f6e74726163742066756e64696e67206661696c65640000000000000000006044820152606401610352565b505060015490565b6000806106bb610738565b905060006106ca8483476101ac565b604051909150339082156108fc029083906000818181858888f193505050501580156106fa573d6000803e3d6000fd5b506000546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd9060640161050b565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a5919061094e565b905090565b600080836000036107c157506001905060006107ee565b838302838582816107d4576107d46108a0565b04146107e75760008092509250506107ee565b6001925090505b9250929050565b600080838301848110156107e75760008092509250506107ee565b60008083831115610826575060009050806107ee565b50600193919092039150565b60008060006060848603121561084757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561087057600080fd5b5035919050565b60006020828403121561088957600080fd5b81356001600160a01b038116811461056b57600080fd5b634e487b7160e01b600052601260045260246000fd5b6000826108d357634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156108ea57600080fd5b8151801515811461056b57600080fd5b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b808202811582820484141761094857634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561096057600080fd5b505191905056fea264697066735822122052a7f4a1e2e0ef4702402301a084ffcf61c9ae5a1530aa199adbbddb483fb40f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c806375c9f3ac1161005957806375c9f3ac1461012f578063b7b0422d14610137578063b8c876b11461014a578063eee1de2314610177578063f1d9f88b1461019757600080fd5b806315770f92146100965780632071a9f4146100bf5780632e1a7d4d146100df57806360c97b221461011457806370ed0ada1461011c575b600080fd5b3480156100a257600080fd5b506100ac60015481565b6040519081526020015b60405180910390f35b3480156100cb57600080fd5b506100ac6100da366004610832565b6101ac565b3480156100eb57600080fd5b506100ff6100fa36600461085e565b610204565b604080519283526020830191909152016100b6565b6100ac610368565b34801561012857600080fd5b50476100ac565b6100ac6104ae565b6100ac61014536600461085e565b610572565b34801561015657600080fd5b506100ac610165366004610877565b60026020526000908152604090205481565b34801561018357600080fd5b506100ac61019236600461085e565b6106b0565b3480156101a357600080fd5b506100ac610738565b6000806101bb856103e56107aa565b91505060006101ca82856107aa565b91505060006101db866103e86107aa565b91505060006101ea82856107f5565b91506101f8905081846108b6565b98975050505050505050565b6000806000610211610738565b9050600061021f85476107aa565b915050600061022e86846107aa565b91505060006001548361024191906108b6565b905060006001548361025391906108b6565b336000908152600260205260409020549091506102709083610810565b336000908152600260205260409020555060015461028e9083610810565b60015550604051339083156108fc029084906000818181858888f193505050501580156102bf573d6000803e3d6000fd5b5060005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033591906108d8565b61035b57604051632e49196f60e01b8152600401610352906108fa565b60405180910390fd5b9097909650945050505050565b6000806103754734610810565b9150506000610382610738565b9050600061039034836107aa565b91505060006103a08460016107f5565b9150600090506103b082846108b6565b9050600085600154346103c39190610923565b6103cd91906108b6565b336000908152600260205260409020549091506103ea90826107f5565b336000908152600260205260409020555060015461040890826107f5565b600155506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610463573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048791906108d8565b6104a457604051632e49196f60e01b8152600401610352906108fa565b9695505050505050565b6000806104b9610738565b905060006104c74734610810565b91505060006104d73483856101ac565b60005460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044015b6020604051808303816000875af115801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906108d8565b61056b57604051632e49196f60e01b8152600401610352906108fa565b9392505050565b60006001546000146105c7576040516305047fa760e41b815260206004820152601960248201527f44455820616c726561647920686173206c6971756964697479000000000000006044820152606401610352565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906108d8565b6106a857604051632e49196f60e01b815260206004820152601760248201527f436f6e74726163742066756e64696e67206661696c65640000000000000000006044820152606401610352565b505060015490565b6000806106bb610738565b905060006106ca8483476101ac565b604051909150339082156108fc029083906000818181858888f193505050501580156106fa573d6000803e3d6000fd5b506000546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd9060640161050b565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a5919061094e565b905090565b600080836000036107c157506001905060006107ee565b838302838582816107d4576107d46108a0565b04146107e75760008092509250506107ee565b6001925090505b9250929050565b600080838301848110156107e75760008092509250506107ee565b60008083831115610826575060009050806107ee565b50600193919092039150565b60008060006060848603121561084757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561087057600080fd5b5035919050565b60006020828403121561088957600080fd5b81356001600160a01b038116811461056b57600080fd5b634e487b7160e01b600052601260045260246000fd5b6000826108d357634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156108ea57600080fd5b8151801515811461056b57600080fd5b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b808202811582820484141761094857634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561096057600080fd5b505191905056fea264697066735822122052a7f4a1e2e0ef4702402301a084ffcf61c9ae5a1530aa199adbbddb483fb40f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "init(uint256)": {
        "details": "This function is a simple initialize function. it helps to add some liquidity to the DEX on creation"
      },
      "price(uint256,uint256,uint256)": {
        "details": "This is the function returns the price it will cost a for a swap."
      },
      "provideLiquidity()": {
        "details": "This is the function that allows  users add liquidity to the exchange"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1153,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1155,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1159,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "liquidity",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}